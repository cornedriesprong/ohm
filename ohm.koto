from bjorklund import *
from pitches import *

#
# constants
# 
export A4_FREQ = 440

#
# sequencers
# 

# euclidean sequencer
export eseq = |x, pulses, steps| x -> seq euclid pulses, steps

#
# filters
# 
export lp = |x, hz = 500, q = 0.717| x -> svf "lp", hz, q
export bp = |x, hz = 500, q = 0.717| x -> svf "bp", hz, q
export hp = |x, hz = 500, q = 0.717| x -> svf "hp", hz, q
export notch = |x, hz = 500, q = 0.717| x -> svf "notch", hz, q
export peak = |x, hz = 500, q = 0.717| x -> svf "peak", hz, q
export allpass = |x, hz = 500, q = 0.717| x -> svf "ap", hz, q

# one pole IIR filter, useful for smoothing signals
export onepole = |x, a = 0.5|
  # define a single sample buffer
  b = buf 1
  # tap the buffer one sample ago
  y = tap b, 1
  # feed the input + the delayed signal back into the buffer
  x = (x * (1 - a) + (y * a)) -> rec b
  x + y

# one zero FIR filter
export fir = |x, a = 0.5|
  (x * (1 - a)) + ((x -> delay 1) * a)

#
# utilities
#
export add = |x, y| x + y
export sub = |x, y| x - y
export mul = |x, y| x * y
export div = |x, y| x / y
export pow = |x, y = 2| x ^ y

# ramp utilities
export ramp_rev = |x| x * -1 + 1
export subdiv = |x, ratio = 2| x * ratio % 1 

export ptof = |pitch| A4_FREQ * 2 ^ ((pitch - A4) / 12)
export ftop = |freq| (12 * log2(freq / A4_FREQ)) + A4

# bipolar to unipolar
export btou = |x| x + 1 * 0.5

# unipolar to bipolar
export utob = |x| x - 1 * 2 

export mix = |xs| 
  xs.fold 0, |acc, x| x * (1 / xs.count()) + acc

# 
# fx
#
export rev = |x, mix = 0.5 | 
  (x * (1 - mix)) + ((x -> reverb) * mix)

export flanger = |x, mix = 0.5, amt = 0.5, speed = 0.1| 
  dry = x * (1 - mix)
  wet = (((x -> delay (lfo speed) * (amt * 1000)) + x) * 0.5) * mix
  dry + wet

export echo = |x, t = sr / 3, fb = 0.5, damping = 0.5|
  b = buf()
  y = tap b, t
  y = y -> onepole damping
  x = x + (y * fb) -> rec b
  x + y

export echo_stereo = |x, t = sr / 3, fb = 0.5, damping = 0.5|
  ch = |offset|
    b = buf()
    delayed = tap b, t + offset -> onepole damping
    wet = x + (delayed * fb) -> rec b
    wet + delayed

  (ch 100 -> pan -1) + (ch -100 -> pan 1)

#
# synthesis
#
export pluck = |t, pitch, length = 1, damping = 0.5|
  period = freq_to_period (ptof pitch)
  noise() * ar 500, t -> echo period, length, damping
