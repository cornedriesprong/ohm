from pitches import *

export A4_FREQ = 440

export C_MAJ = [0, 2, 4, 5, 7, 9, 11]
export C_MIN = [0, 2, 3, 5, 7, 8, 10]

export ptof = |p| A4_FREQ * (2 ^ ((p - A4) / 12))
export ftop = |f| ((f / A4_FREQ).log2() * 12 + A4).round()
export freq_to_period = |f| sr / f

export ar = |release, trig| trig -> env [(1, 0), (0, release)]
export lfo = |hz = 0.1| sin(hz) * 0.5 + 0.5

export mix = |xs| 
  xs.fold 0, |acc, x| x * (1 / xs.count()) + acc

export rev = |x, mix = 0.5 | 
  (x * (1 - mix)) + ((x -> reverb) * mix)

export flanger = |x, amt = 0.5, speed = 0.1| 
  ((x -> delay (lfo speed) * (amt * 1000)) + x) * 0.5

# a one pole IIR filter, useful for smoothing signals
export onepole = |x, a = 0.5|
  # define a single sample buffer
  b = buf 1
  # tap the buffer one sample ago
  y = tap b, 1
  # feed the input + the delayed signal back into the buffer
  x = (x * a) + (y * (1 - a)) -> rec b
  x + y

# one zero FIR filter
export fir = |x, a = 0.5|
  (x * (1 - a)) + ((x -> delay 1) * a)

export echo = |x, t = 22050, fb = 0.5, damping = 0.5|
  # define a delay buffer 'b'
  b = buf()
  # tap the buffer at offset t
  y = tap b, t
  # feed the input + the delayed signal back into the buffer
  y = y -> onepole damping
  x = x + (y * fb) -> rec b
  x + y

export pluck = |t, pitch, length = 1, damping = 0.5|
  period = freq_to_period (ptof pitch)
  noise() * ar 500, t -> echo period, length, damping

export bseq = |trigs, trig|
  let values = trigs.transform |x| if x == true then 1 else 0
  seq(values, trig)

